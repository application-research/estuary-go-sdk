/*
Estuary API

This is the API for the Estuary application.

API version: 0.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// UtilHttpError struct for UtilHttpError
type UtilHttpError struct {
	Code *int32 `json:"code,omitempty"`
	Details *string `json:"details,omitempty"`
	Reason *string `json:"reason,omitempty"`
}

// NewUtilHttpError instantiates a new UtilHttpError object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUtilHttpError() *UtilHttpError {
	this := UtilHttpError{}
	return &this
}

// NewUtilHttpErrorWithDefaults instantiates a new UtilHttpError object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUtilHttpErrorWithDefaults() *UtilHttpError {
	this := UtilHttpError{}
	return &this
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *UtilHttpError) GetCode() int32 {
	if o == nil || o.Code == nil {
		var ret int32
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UtilHttpError) GetCodeOk() (*int32, bool) {
	if o == nil || o.Code == nil {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *UtilHttpError) HasCode() bool {
	if o != nil && o.Code != nil {
		return true
	}

	return false
}

// SetCode gets a reference to the given int32 and assigns it to the Code field.
func (o *UtilHttpError) SetCode(v int32) {
	o.Code = &v
}

// GetDetails returns the Details field value if set, zero value otherwise.
func (o *UtilHttpError) GetDetails() string {
	if o == nil || o.Details == nil {
		var ret string
		return ret
	}
	return *o.Details
}

// GetDetailsOk returns a tuple with the Details field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UtilHttpError) GetDetailsOk() (*string, bool) {
	if o == nil || o.Details == nil {
		return nil, false
	}
	return o.Details, true
}

// HasDetails returns a boolean if a field has been set.
func (o *UtilHttpError) HasDetails() bool {
	if o != nil && o.Details != nil {
		return true
	}

	return false
}

// SetDetails gets a reference to the given string and assigns it to the Details field.
func (o *UtilHttpError) SetDetails(v string) {
	o.Details = &v
}

// GetReason returns the Reason field value if set, zero value otherwise.
func (o *UtilHttpError) GetReason() string {
	if o == nil || o.Reason == nil {
		var ret string
		return ret
	}
	return *o.Reason
}

// GetReasonOk returns a tuple with the Reason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UtilHttpError) GetReasonOk() (*string, bool) {
	if o == nil || o.Reason == nil {
		return nil, false
	}
	return o.Reason, true
}

// HasReason returns a boolean if a field has been set.
func (o *UtilHttpError) HasReason() bool {
	if o != nil && o.Reason != nil {
		return true
	}

	return false
}

// SetReason gets a reference to the given string and assigns it to the Reason field.
func (o *UtilHttpError) SetReason(v string) {
	o.Reason = &v
}

func (o UtilHttpError) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Code != nil {
		toSerialize["code"] = o.Code
	}
	if o.Details != nil {
		toSerialize["details"] = o.Details
	}
	if o.Reason != nil {
		toSerialize["reason"] = o.Reason
	}
	return json.Marshal(toSerialize)
}

type NullableUtilHttpError struct {
	value *UtilHttpError
	isSet bool
}

func (v NullableUtilHttpError) Get() *UtilHttpError {
	return v.value
}

func (v *NullableUtilHttpError) Set(val *UtilHttpError) {
	v.value = val
	v.isSet = true
}

func (v NullableUtilHttpError) IsSet() bool {
	return v.isSet
}

func (v *NullableUtilHttpError) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUtilHttpError(val *UtilHttpError) *NullableUtilHttpError {
	return &NullableUtilHttpError{value: val, isSet: true}
}

func (v NullableUtilHttpError) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUtilHttpError) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


